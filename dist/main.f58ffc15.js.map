{"version":3,"sources":["main.js"],"names":["Vue","el","data","equation","isDecimalAdded","isOperatorAdded","isStarted","methods","isOperator","character","indexOf","append","calculate","result","replace","RegExp","parseFloat","eval","toFixed","toString","calculateToggle","calculatePercentage","clear"],"mappings":";AAAA,IAAIA,IAAI,CACNC,GAAI,OACJC,KAAM,CACJC,SAAU,IACVC,gBAAgB,EAChBC,iBAAiB,EACjBC,WAAW,GAEbC,QAAS,CAEPC,WAAWC,SAAAA,GACF,MAAA,CAAC,IAAK,IAAK,IAAK,KAAKC,QAAQD,IAAc,GAGpDE,OAAOF,SAAAA,GAED,GAAkB,MAAlB,KAAKN,WAAqB,KAAKK,WAAWC,GAS5C,MARkB,MAAdA,GACGN,KAAAA,UAAY,GAAKM,EACjBL,KAAAA,gBAAiB,GAEjBD,KAAAA,SAAW,GAAKM,OAGlBH,KAAAA,WAAY,GAKf,IAAC,KAAKE,WAAWC,GAAY,CAC3BA,GAAc,MAAdA,GAAqB,KAAKL,eAC5B,OAGgB,MAAdK,GACGL,KAAAA,gBAAiB,EACjBC,KAAAA,iBAAkB,GAElBA,KAAAA,iBAAkB,EAGpBF,KAAAA,UAAY,GAAKM,EAIpB,KAAKD,WAAWC,KAAe,KAAKJ,kBACjCF,KAAAA,UAAY,GAAKM,EACjBL,KAAAA,gBAAiB,EACjBC,KAAAA,iBAAkB,IAI3BO,UAAY,SAAA,YACNC,IAAAA,OAAS,KAAKV,SACfW,QAAQ,IAAIC,OAAO,IAAK,KAAM,KAC9BD,QAAQ,IAAIC,OAAO,IAAK,KAAM,KAE5BZ,KAAAA,SAAWa,WAAWC,KAAKJ,QAAQK,QAAQ,IAAIC,WAC/Cf,KAAAA,gBAAiB,EACjBC,KAAAA,iBAAkB,GAGzBe,gBAAkB,YACZ,KAAKf,iBAAoB,KAAKC,YAI7BH,KAAAA,SAAW,KAAKA,SAAW,OAC3BS,KAAAA,cAGPS,oBAAsB,YAChB,KAAKhB,iBAAoB,KAAKC,YAI7BH,KAAAA,SAAW,KAAKA,SAAW,SAC3BS,KAAAA,cAGPU,MAAQ,WACDnB,KAAAA,SAAW,IACXC,KAAAA,gBAAiB,EACjBC,KAAAA,iBAAkB,EAClBC,KAAAA,WAAY","file":"main.f58ffc15.js","sourceRoot":"..","sourcesContent":["new Vue({\r\n  el: \"#app\",\r\n  data: {\r\n    equation: \"0\",\r\n    isDecimalAdded: false,\r\n    isOperatorAdded: false,\r\n    isStarted: false,\r\n  },\r\n  methods: {\r\n    // Check if the character is + / - / × / ÷\r\n    isOperator(character) {\r\n      return [\"+\", \"-\", \"×\", \"÷\"].indexOf(character) > -1;\r\n    },\r\n    // When pressed Operators or Numbers\r\n    append(character) {\r\n      // Start\r\n      if (this.equation === \"0\" && !this.isOperator(character)) {\r\n        if (character === \".\") {\r\n          this.equation += \"\" + character;\r\n          this.isDecimalAdded = true;\r\n        } else {\r\n          this.equation = \"\" + character;\r\n        }\r\n\r\n        this.isStarted = true;\r\n        return;\r\n      }\r\n\r\n      // If Number\r\n      if (!this.isOperator(character)) {\r\n        if (character === \".\" && this.isDecimalAdded) {\r\n          return;\r\n        }\r\n\r\n        if (character === \".\") {\r\n          this.isDecimalAdded = true;\r\n          this.isOperatorAdded = true;\r\n        } else {\r\n          this.isOperatorAdded = false;\r\n        }\r\n\r\n        this.equation += \"\" + character;\r\n      }\r\n\r\n      // Added Operator\r\n      if (this.isOperator(character) && !this.isOperatorAdded) {\r\n        this.equation += \"\" + character;\r\n        this.isDecimalAdded = false;\r\n        this.isOperatorAdded = true;\r\n      }\r\n    },\r\n    // When pressed '='\r\n    calculate() {\r\n      let result = this.equation\r\n        .replace(new RegExp(\"×\", \"g\"), \"*\")\r\n        .replace(new RegExp(\"÷\", \"g\"), \"/\");\r\n\r\n      this.equation = parseFloat(eval(result).toFixed(9)).toString();\r\n      this.isDecimalAdded = false;\r\n      this.isOperatorAdded = false;\r\n    },\r\n    // When pressed '+/-'\r\n    calculateToggle() {\r\n      if (this.isOperatorAdded || !this.isStarted) {\r\n        return;\r\n      }\r\n\r\n      this.equation = this.equation + \"* -1\";\r\n      this.calculate();\r\n    },\r\n    // When pressed '%'\r\n    calculatePercentage() {\r\n      if (this.isOperatorAdded || !this.isStarted) {\r\n        return;\r\n      }\r\n\r\n      this.equation = this.equation + \"* 0.01\";\r\n      this.calculate();\r\n    },\r\n    // When pressed 'AC'\r\n    clear() {\r\n      this.equation = \"0\";\r\n      this.isDecimalAdded = false;\r\n      this.isOperatorAdded = false;\r\n      this.isStarted = false;\r\n    },\r\n  },\r\n});\r\n"]}